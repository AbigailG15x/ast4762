# -*- coding: utf-8 -*-
"""hw2_abigailglover.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lGZ-UsJXQugqYXWLrMmLXfnGrxTdKeKR
"""

# Abigail Glover
# HW 2
# 9/3/2023

# Import libraries
import numpy as np
import sys
import math
import numpy.ma as ma
import matplotlib.pyplot as plt
from pathlib import Path

print('Problem 2')
print('Part a.)')

# Create an array of integers from 0 to 1000
x = np.array(np.arange(0, 1001, 1))

# Specify no truncation when printing the array to check
#numpy.set_printoptions(threshold=sys.maxsize)

# Check to make sure that the array is correct
#print(x)

# How many elements do you need?
print('\nHow many elements do you need?')
print('\n- One element was needed to create the array: the final \
digit in the array + 1. \nWhen printed, the array contains 1,001 elements\
in total.')

# Print the data type of the array
print('\nData type of x:', type(x.dtype))

# Print the array's minimum and maximum
print('\nThe minimum of the array x is:', np.min(x))
print('The maximum of the array x is:', np.max(x))

print('\nPart b.)')

# Change the datatype of x
x = np.arange(1001, dtype = np.float32)

# Re-scale x to contain values from 0 to 2pi
x = (2 * np.pi / 1000) * x

# Check to make sure the array is correct
#print(x)

# Print the array's new minimum and maximum
print('\nThe minimum of the new array x is:', np.min(x))
print('The maximum of the new array x is:', np.max(x))

# Part c.)

# Make an array y whose values are the sine values of x
y = np.sin(x)

# Check to make sure the array is correct
#print(y)

print('\nPart d.)')

# Print value of element 234 of y
print('\nElement 234 of y is:', y[234])

print('\nProblem 3')
print('Part a.) and b.)')

# Plot y vs x from Problem 2
# Make the plot publication-ready
plt.figure( figsize= (8,6) )
plt.plot( x, y, linestyle= '-', color= 'firebrick' )

# Label plot
plt.title('Sin(x)', fontsize= 14)

# Axis labels
plt.xlabel( 'x - values', fontsize= 12 )
plt.ylabel( 'Sin (x)', fontsize= 12 )

# Save plot as a PNG using appropriate naming convention
plt.savefig("hw2_abigailglover_problem3_graph1.png")

# Show plot to verify
plt.show()

print('Question 4')

# Make a "ramp" array r with 101 evenly-spaced elements from -1 to +1
r = np.array(np.linspace(-1, 1, num = 101))

# Check the array
#print(r)

# Clip (mask) the array
r_clip = np.where(r < -0.5, -0.5, np.where(r > 0.5, 0.5, r))

# Check the array was clipped
#print(r)

# Plot the original and clipped arrays
plt.figure( figsize= (8,6) )
plt.plot( r, linestyle= '-', color= 'cornflowerblue' )
plt.plot( r_clip, linestyle= '--', color= 'orchid' )

# Plot Label
plt.title('Clipped vs Unclipped Array "r"', fontsize= 14)

# Axis labels
plt.xlabel( 'x - values', fontsize= 12 )
plt.ylabel( 'Sin (x)', fontsize= 12 )

# Show plot to verify
plt.show()

print('Question 5')

# Create a 200 x 300 float64 array
# Create indices for rows and columns and specify data type
row_indices, col_indices = np.indices((200, 300), dtype = np.float64)

# Incorporating indices into the array
array = row_indices

# Check array
#print(array)

# Displaying the array
plt.imshow(array, cmap = 'gray')
plt.show()

# Examining randomly placed array elements
# Generate random row and column indices
num_samples = 5
random_rows = np.random.randint(0, array.shape[0], num_samples)
random_cols = np.random.randint(0, array.shape[1], num_samples)

# Examine values at random coordinates
values = array[random_rows, random_cols]

# Calculate the expected Y-coordinates for all random rows
exp_y = random_rows

# Print the values vs expected values
print("\n\nValues at random coordinates:")
print(values)
print("\nExpected Y-coordinates:")
print(exp_y)

# Checking the data type of the final array
print('\nData type of the array is:', type(array.dtype))

print('Question 6')
print('\nGive the URLs of two websites that provide free astronomical\
 software that is written in Python.')

# Website 1
print('\n1.) Skyfield - Astronomy for Python')
print('URL: https://www.linuxlinks.com/skyfield-astronomy-python/')

# Website 2
print('\n2.) The Astropy Project')
print('URL: https://www.astropy.org/')

# Paragraph about the software as an extended string
paragraph = '''
Skyfield is a powerful and versatile open-source software
designed for the precise calculation of celestial object
positions, including stars, planets, and satellites, through
advanced vector operations. It leverages Earth's orbital
data to provide highly accurate results, typically aligning
closely with the United States Naval Observatory's
Astronomical Almanac with a precision of +/- 0.0005
arcseconds. Skyfield seamlessly integrates with both Python
2 and 3, and it relies on NumPy as its sole binary dependency,
making it accessible and user-friendly for astronomers and
researchers seeking reliable astronomical computations and data.


Astropy is a renowned open-source software package designed
to cater to the needs of astronomers and astrophysicists.
It provides a large set of tools, libraries, and functions.
Astropy serves as a collaborative platform that aims to
standardize and streamline data formats and conventions within
the field, facilitating seamless interoperability between
various other astronomical software packages. It has
widespread community support and the creators boast commitment
to continue to improve upon the tools available.
'''

# Specify the file path
file_path = r"C:\Users\Abigail/ Glover\Documents\GitHub\ast4762\homework\hw2_abigailglover\hw2_abigailglover__problem6_data.txt"

# Open the file in write mode and save the extended string
with open(file_path, "w") as file:
    file.write(paragraph)

# Let users know the file has been saved
print('\nMore information about these software has been saved as\
 hw2_abigailglover_problem6_data.txt under the file hw2_abigailglover.')



